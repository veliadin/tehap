{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const useApiProgress = apiPath => {\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    let requestInterceptor, responseInterceptor;\n\n    const updateApiCallFor = (url, inProgress) => {\n      if (url.startsWith(apiPath)) {\n        setPendingApiCall(inProgress);\n      }\n    };\n\n    const registerInterceptors = () => {\n      requestInterceptor = axios.interceptors.request.use(request => {\n        updateApiCallFor(request.url, true);\n        return request;\n      });\n      responseInterceptor = axios.interceptors.response.use(response => {\n        updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    };\n\n    const unRegisterInterceptor = () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n\n    registerInterceptors();\n    return function unmount() {\n      unRegisterInterceptor();\n    };\n  }, []);\n  return pendingApiCall;\n};","map":{"version":3,"sources":["C:/Users/adinv/FrontEnd Projects/Tehap_FrontEnd/src/shared/ApiProgress.js"],"names":["useState","useEffect","axios","useApiProgress","apiPath","pendingApiCall","setPendingApiCall","requestInterceptor","responseInterceptor","updateApiCallFor","url","inProgress","startsWith","registerInterceptors","interceptors","request","use","response","config","error","unRegisterInterceptor","eject","unmount"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACvC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,KAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,kBAAJ,EAAwBC,mBAAxB;;AAEA,UAAMC,gBAAgB,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;AAC1C,UAAID,GAAG,CAACE,UAAJ,CAAeR,OAAf,CAAJ,EAA6B;AACzBE,QAAAA,iBAAiB,CAACK,UAAD,CAAjB;AACH;AACJ,KAJD;;AAMA,UAAME,oBAAoB,GAAG,MAAM;AAC/BN,MAAAA,kBAAkB,GAAGL,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AAC7DN,QAAAA,gBAAgB,CAACM,OAAO,CAACL,GAAT,EAAc,IAAd,CAAhB;AACA,eAAOK,OAAP;AACH,OAHoB,CAArB;AAIAP,MAAAA,mBAAmB,GAAGN,KAAK,CAACY,YAAN,CAAmBG,QAAnB,CAA4BD,GAA5B,CAAiCC,QAAD,IAAc;AAChER,QAAAA,gBAAgB,CAACQ,QAAQ,CAACC,MAAT,CAAgBR,GAAjB,EAAsB,KAAtB,CAAhB;AACA,eAAOO,QAAP;AACH,OAHqB,EAIjBE,KAAD,IAAW;AACPV,QAAAA,gBAAgB,CAACU,KAAK,CAACD,MAAN,CAAaR,GAAd,EAAmB,KAAnB,CAAhB;AACA,cAAMS,KAAN;AACH,OAPiB,CAAtB;AAQH,KAbD;;AAeA,UAAMC,qBAAqB,GAAG,MAAM;AAChClB,MAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BM,KAA3B,CAAiCd,kBAAjC;AACAL,MAAAA,KAAK,CAACY,YAAN,CAAmBG,QAAnB,CAA4BI,KAA5B,CAAkCb,mBAAlC;AACH,KAHD;;AAMAK,IAAAA,oBAAoB;AAEpB,WAAO,SAASS,OAAT,GAAmB;AACtBF,MAAAA,qBAAqB;AACxB,KAFD;AAIH,GApCQ,EAoCP,EApCO,CAAT;AAqCA,SAAOf,cAAP;AACH,CAzCM","sourcesContent":["import {useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useApiProgress = (apiPath) => {\r\n    const [pendingApiCall, setPendingApiCall] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let requestInterceptor, responseInterceptor;\r\n\r\n        const updateApiCallFor = (url, inProgress) => {\r\n            if (url.startsWith(apiPath)) {\r\n                setPendingApiCall(inProgress);\r\n            }\r\n        }\r\n\r\n        const registerInterceptors = () => {\r\n            requestInterceptor = axios.interceptors.request.use((request) => {\r\n                updateApiCallFor(request.url, true);\r\n                return request;\r\n            });\r\n            responseInterceptor = axios.interceptors.response.use((response) => {\r\n                updateApiCallFor(response.config.url, false);\r\n                return response;\r\n            },\r\n                (error) => {\r\n                    updateApiCallFor(error.config.url, false);\r\n                    throw error;\r\n                });\r\n        };\r\n\r\n        const unRegisterInterceptor = () => {\r\n            axios.interceptors.request.eject(requestInterceptor);\r\n            axios.interceptors.response.eject(responseInterceptor);\r\n        }\r\n\r\n\r\n        registerInterceptors();\r\n\r\n        return function unmount() {\r\n            unRegisterInterceptor();\r\n        }\r\n\r\n    },[])\r\n    return pendingApiCall;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}