{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adinv\\\\tehapfrontend\\\\src\\\\shared\\\\ApiProgress.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _temp;\n\n  return _temp = class ApiProgress extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url == apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.requestInterceptor = axios.interceptors.request.use(request => {\n        this.updateApiCallFor(request.url, true);\n        return request;\n      });\n      this.responseInterceptor = axios.interceptors.response.use(response => {\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.requestInterceptor);\n      axios.interceptors.response.eject(this.responseInterceptor);\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state;\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({\n        pendingApiCall: pendingApiCall\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 20\n        }\n      })); //return (div>{React.cloneElement(this.props.children, {pendingApiCall})}</div>);\n    }\n\n  }, _temp;\n}","map":{"version":3,"sources":["C:/Users/adinv/tehapfrontend/src/shared/ApiProgress.js"],"names":["React","Component","axios","withApiProgress","WrappedComponent","apiPath","ApiProgress","state","pendingApiCall","updateApiCallFor","url","inProgress","setState","componentDidMount","requestInterceptor","interceptors","request","use","responseInterceptor","response","config","error","componentWillUnmount","eject","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,eAAT,CAAyBC,gBAAzB,EAA2CC,OAA3C,EAAmD;AAAA;;AACtD,iBAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,WAEvCM,KAFuC,GAE/B;AACJC,QAAAA,cAAc,EAAE;AADZ,OAF+B;;AAAA,WAwBvCC,gBAxBuC,GAwBpB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACpC,YAAID,GAAG,IAAIL,OAAX,EAAoB;AAChB,eAAKO,QAAL,CAAc;AAAEJ,YAAAA,cAAc,EAAEG;AAAlB,WAAd;AACH;AACJ,OA5BsC;AAAA;;AAMvCE,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,kBAAL,GAA0BZ,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AAClE,aAAKP,gBAAL,CAAsBO,OAAO,CAACN,GAA9B,EAAmC,IAAnC;AACA,eAAOM,OAAP;AACH,OAHyB,CAA1B;AAIA,WAAKE,mBAAL,GAA2BhB,KAAK,CAACa,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CAAiCE,QAAD,IAAc;AACrE,aAAKV,gBAAL,CAAsBU,QAAQ,CAACC,MAAT,CAAgBV,GAAtC,EAA2C,KAA3C;AACA,eAAOS,QAAP;AACH,OAH0B,EAItBE,KAAD,IAAW;AACP,aAAKZ,gBAAL,CAAsBY,KAAK,CAACD,MAAN,CAAaV,GAAnC,EAAwC,KAAxC;AACA,cAAMW,KAAN;AACH,OAPsB,CAA3B;AAQH;;AACLC,IAAAA,oBAAoB,GAAE;AAClBpB,MAAAA,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,kBAAtC;AACAZ,MAAAA,KAAK,CAACa,YAAN,CAAmBI,QAAnB,CAA4BI,KAA5B,CAAkC,KAAKL,mBAAvC;AACH;;AAOGM,IAAAA,MAAM,GAAG;AACL,YAAM;AAAEhB,QAAAA;AAAF,UAAqB,KAAKD,KAAhC;AACA,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,cAAc,EAAIC;AAApC,SAAwD,KAAKiB,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP,CAFK,CAGL;AACH;;AAlCsC,GAA3C;AAoCH","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath){\r\n    return class ApiProgress extends Component {\r\n\r\n        state = {\r\n            pendingApiCall: false,\r\n    \r\n        };\r\n        componentDidMount() {\r\n            this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n                this.updateApiCallFor(request.url, true);\r\n                return request;\r\n            });\r\n            this.responseInterceptor = axios.interceptors.response.use((response) => {\r\n                this.updateApiCallFor(response.config.url, false);\r\n                return response;\r\n            },\r\n                (error) => {\r\n                    this.updateApiCallFor(error.config.url, false);\r\n                    throw error;\r\n                });\r\n        }\r\n    componentWillUnmount(){\r\n        axios.interceptors.request.eject(this.requestInterceptor);\r\n        axios.interceptors.response.eject(this.responseInterceptor);\r\n    }\r\n        updateApiCallFor = (url, inProgress) => {\r\n            if (url == apiPath) {\r\n                this.setState({ pendingApiCall: inProgress });\r\n            }\r\n        }\r\n    \r\n        render() {\r\n            const { pendingApiCall } = this.state;\r\n            return <WrappedComponent pendingApiCall = {pendingApiCall} {...this.props}/>\r\n            //return (div>{React.cloneElement(this.props.children, {pendingApiCall})}</div>);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}