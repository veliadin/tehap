{"ast":null,"code":"var _jsxFileName = \"D:\\\\JsProjects\\\\Tehap_FrontEnd\\\\Tehap_FrontEnd\\\\src\\\\components\\\\Activities.js\";\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getActivities, getOldActivities } from '../api/apiCalls';\nimport { useApiProgress } from '../shared/ApiProgress';\nimport ActivityView from './ActivityView';\nimport Spinner from '../components/Spinner';\nimport { useParams } from 'react-router-dom';\n\nconst Activities = () => {\n  const [activityPage, setActivityPage] = useState({\n    content: [],\n    last: true,\n    number: 0\n  });\n  const [newActivityCount, setNewActivityCount] = useState(0);\n  const {\n    t\n  } = useTranslation();\n  const {\n    username\n  } = useParams();\n  const path = username ? `/api/users/${username}/activities?page=` : `/api/getActivities?page=`;\n  const initialActivityLoadProgress = useApiProgress('get', path);\n  let lastActivityId = 0;\n  let firstActivityId = 0;\n\n  if (activityPage.content.length > 0) {\n    firstActivityId = activityPage.content[0].id;\n    const lastActivityIndex = activityPage.content.length - 1;\n    lastActivityId = activityPage.content[lastActivityIndex].id;\n  }\n\n  const oldActivityPath = username ? `/api/users/${username}/activities/${lastActivityId}` : `/api/getActivities/${lastActivityId}`;\n  const loadOldActivitiesProgress = useApiProgress('get', oldActivityPath, true);\n  useEffect(() => {\n    const getCount = async () => {\n      const response = await getNewActivityCount(firstActivityId);\n      setNewActivityCount(response.data.count);\n    };\n\n    setInterval(() => {\n      getCount();\n    }, 1000);\n  }, [firstActivityId]);\n  useEffect(() => {\n    const loadActivities = async page => {\n      try {\n        const response = await getActivities(username, page);\n        setActivityPage(previousActivityPage => ({ ...response.data,\n          content: [...previousActivityPage.content, ...response.data.content]\n        }));\n      } catch (error) {}\n    };\n\n    loadActivities();\n  }, [username]);\n\n  const loadOldActivities = async () => {\n    const response = await getOldActivities(lastActivityId, username);\n    setActivityPage(previousActivityPage => ({ ...response.data,\n      content: [...previousActivityPage.content, ...response.data.content]\n    }));\n  };\n\n  const {\n    content,\n    last\n  } = activityPage;\n\n  if (content.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-secondary text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }\n    }, initialActivityLoadProgress ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 44\n      }\n    }) : t('There are no activities'));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, content.map(activity => {\n    return /*#__PURE__*/React.createElement(ActivityView, {\n      key: activity.id,\n      activity: activity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }\n    });\n  }), !last && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-secondary text-center\",\n    style: {\n      cursor: loadOldActivitiesProgress ? 'not-allowed' : 'pointer'\n    },\n    onClick: loadOldActivitiesProgress ? () => {} : () => loadOldActivities(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, loadOldActivitiesProgress ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 50\n    }\n  }) : t('Load new activities')));\n};\n\nexport default Activities;","map":{"version":3,"sources":["D:/JsProjects/Tehap_FrontEnd/Tehap_FrontEnd/src/components/Activities.js"],"names":["React","useEffect","useState","useTranslation","getActivities","getOldActivities","useApiProgress","ActivityView","Spinner","useParams","Activities","activityPage","setActivityPage","content","last","number","newActivityCount","setNewActivityCount","t","username","path","initialActivityLoadProgress","lastActivityId","firstActivityId","length","id","lastActivityIndex","oldActivityPath","loadOldActivitiesProgress","getCount","response","getNewActivityCount","data","count","setInterval","loadActivities","page","previousActivityPage","error","loadOldActivities","map","activity","cursor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getActivities, getOldActivities } from '../api/apiCalls';\r\nimport { useApiProgress } from '../shared/ApiProgress';\r\nimport ActivityView from './ActivityView';\r\nimport Spinner from '../components/Spinner';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Activities = () => {\r\n\r\n    const [activityPage, setActivityPage] = useState({ content: [], last: true, number: 0 });\r\n    const [newActivityCount, setNewActivityCount] = useState(0);\r\n    const { t } = useTranslation();\r\n    const { username } = useParams();\r\n\r\n\r\n    const path = username ? `/api/users/${username}/activities?page=` : `/api/getActivities?page=`;\r\n    const initialActivityLoadProgress = useApiProgress('get', path);\r\n\r\n    let lastActivityId = 0;\r\n    let firstActivityId = 0;\r\n    if (activityPage.content.length > 0) {\r\n        firstActivityId = activityPage.content[0].id;\r\n        const lastActivityIndex = activityPage.content.length - 1;\r\n        lastActivityId = activityPage.content[lastActivityIndex].id;\r\n\r\n    }\r\n    const oldActivityPath = username ? `/api/users/${username}/activities/${lastActivityId}` : `/api/getActivities/${lastActivityId}`;\r\n    const loadOldActivitiesProgress = useApiProgress('get', oldActivityPath, true)\r\n\r\n    useEffect(() => {\r\n        const getCount = async () => {\r\n            const response = await getNewActivityCount(firstActivityId);\r\n            setNewActivityCount(response.data.count);\r\n        }\r\n        setInterval(() => {\r\n            getCount();\r\n        }, 1000)\r\n\r\n    }, [firstActivityId])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const loadActivities = async page => {\r\n            try {\r\n                const response = await getActivities(username, page);\r\n                setActivityPage(previousActivityPage => ({\r\n                    ...response.data,\r\n                    content: [...previousActivityPage.content, ...response.data.content]\r\n                }))\r\n            } catch (error) { }\r\n        };\r\n        loadActivities();\r\n    }, [username]);\r\n\r\n\r\n    const loadOldActivities = async () => {\r\n\r\n        const response = await getOldActivities(lastActivityId, username);\r\n        setActivityPage(previousActivityPage => ({\r\n            ...response.data,\r\n            content: [...previousActivityPage.content, ...response.data.content]\r\n        }))\r\n    }\r\n\r\n    const { content, last } = activityPage;\r\n\r\n    if (content.length === 0) {\r\n        return <div className=\"alert alert-secondary text-center\">\r\n            {initialActivityLoadProgress ? <Spinner /> : t('There are no activities')}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {content.map(activity => {\r\n                return <ActivityView key={activity.id} activity={activity}></ActivityView>\r\n            })}\r\n            {!last &&\r\n                <div\r\n                    className=\"alert alert-secondary text-center\"\r\n                    style={{ cursor: loadOldActivitiesProgress ? 'not-allowed' : 'pointer' }}\r\n                    onClick={loadOldActivitiesProgress ? () => { } : () => loadOldActivities()}\r\n                >\r\n                    {loadOldActivitiesProgress ? <Spinner /> : t('Load new activities')}\r\n                </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Activities;"]},"metadata":{},"sourceType":"module"}