{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adinv\\\\FrontEnd Projects\\\\AppStater_v01\\\\src\\\\shared\\\\ApiProgress.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\nexport const useApiProgress = apiPath => {\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    let requestInterceptor, responseInterceptor;\n\n    updateApiCallFor = (url, inProgress) => {\n      if (url === apiPath) {\n        setPendingApiCall(inProgress);\n      }\n    };\n\n    const registerInterceptors = () => {\n      requestInterceptor = axios.interceptors.request.use(request => {\n        updateApiCallFor(request.url, true);\n        return request;\n      });\n      responseInterceptor = axios.interceptors.response.use(response => {\n        updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    };\n\n    unRegisterInterceptor = () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n\n    registerInterceptors();\n    return function unmount() {\n      unRegisterInterceptor();\n    };\n  });\n  return pendingApiCAll;\n};\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _temp;\n\n  return _temp = class ApiProgress extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.registerInterceptors = () => {\n        this.requestInterceptor = axios.interceptors.request.use(request => {\n          this.updateApiCallFor(request.url, true);\n          return request;\n        });\n        this.responseInterceptor = axios.interceptors.response.use(response => {\n          this.updateApiCallFor(response.config.url, false);\n          return response;\n        }, error => {\n          this.updateApiCallFor(error.config.url, false);\n          throw error;\n        });\n      };\n\n      this.unRegisterInterceptor = () => {\n        axios.interceptors.request.eject(requestInterceptor);\n        axios.interceptors.response.eject(responseInterceptor);\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          setPendingApiCall(inProgress);\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.registerInterceptors();\n    }\n\n    componentWillUnmount() {\n      this.unRegisterInterceptor();\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state;\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({\n        pendingApiCall: pendingApiCall\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 20\n        }\n      }));\n    }\n\n  }, _temp;\n}","map":{"version":3,"sources":["C:/Users/adinv/FrontEnd Projects/AppStater_v01/src/shared/ApiProgress.js"],"names":["React","Component","useState","useEffect","axios","useApiProgress","apiPath","pendingApiCall","setPendingApiCall","requestInterceptor","responseInterceptor","updateApiCallFor","url","inProgress","registerInterceptors","interceptors","request","use","response","config","error","unRegisterInterceptor","eject","unmount","pendingApiCAll","withApiProgress","WrappedComponent","ApiProgress","state","componentDidMount","componentWillUnmount","render","props"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useApiProgress = (apiPath) => {\r\n    const [pendingApiCall, setPendingApiCall] = useState(false)\r\n\r\n    useEffect(() => {\r\n        let requestInterceptor, responseInterceptor;\r\n\r\n        updateApiCallFor = (url, inProgress) => {\r\n            if (url === apiPath) {\r\n                setPendingApiCall(inProgress);\r\n            }\r\n        }\r\n\r\n        const registerInterceptors = () => {\r\n            requestInterceptor = axios.interceptors.request.use((request) => {\r\n                updateApiCallFor(request.url, true);\r\n                return request;\r\n            });\r\n            responseInterceptor = axios.interceptors.response.use((response) => {\r\n                updateApiCallFor(response.config.url, false);\r\n                return response;\r\n            },\r\n                (error) => {\r\n                    updateApiCallFor(error.config.url, false);\r\n                    throw error;\r\n                });\r\n        };\r\n\r\n        unRegisterInterceptor = () => {\r\n            axios.interceptors.request.eject(requestInterceptor);\r\n            axios.interceptors.response.eject(responseInterceptor);\r\n        }\r\n\r\n\r\n        registerInterceptors();\r\n\r\n        return function unmount() {\r\n            unRegisterInterceptor();\r\n        }\r\n\r\n    })\r\n    return pendingApiCAll;\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath) {\r\n    return class ApiProgress extends Component {\r\n\r\n        state = {\r\n            pendingApiCall: false,\r\n\r\n        };\r\n        componentDidMount() {\r\n            this.registerInterceptors();\r\n        }\r\n        componentWillUnmount() {\r\n            this.unRegisterInterceptor();\r\n        }\r\n\r\n        registerInterceptors = () => {\r\n            this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n                this.updateApiCallFor(request.url, true);\r\n                return request;\r\n            });\r\n            this.responseInterceptor = axios.interceptors.response.use((response) => {\r\n                this.updateApiCallFor(response.config.url, false);\r\n                return response;\r\n            },\r\n                (error) => {\r\n                    this.updateApiCallFor(error.config.url, false);\r\n                    throw error;\r\n                });\r\n        };\r\n\r\n        unRegisterInterceptor = () => {\r\n            axios.interceptors.request.eject(requestInterceptor);\r\n            axios.interceptors.response.eject(responseInterceptor);\r\n        };\r\n\r\n        updateApiCallFor = (url, inProgress) => {\r\n            if (url === apiPath) {\r\n                setPendingApiCall(inProgress);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            const { pendingApiCall } = this.state;\r\n            return <WrappedComponent pendingApiCall={pendingApiCall} {...this.props} />\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}