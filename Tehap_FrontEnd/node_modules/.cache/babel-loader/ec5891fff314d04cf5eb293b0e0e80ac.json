{"ast":null,"code":"var _jsxFileName = \"D:\\\\JsProjects\\\\Tehap_FrontEnd\\\\Tehap_FrontEnd\\\\src\\\\components\\\\ProfileCard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\nimport { useTranslation } from \"react-i18next\";\nimport Input from \"../components/Input\";\nimport { updateUser } from \"../api/apiCalls\";\n\nconst ProfileCard = props => {\n  const {\n    username: loggedInUsername\n  } = useSelector(store => {\n    return {\n      username: store.username\n    };\n  });\n  const [inEditMode, setInEditMode] = useState(false);\n  const [updatedDisplayName, setUpdatedDisplayName] = useState();\n  const [user, setUser] = useState({});\n  const {\n    t\n  } = useTranslation(); //const { user } = props;\n\n  const {\n    username,\n    displayName,\n    image\n  } = user;\n  useEffect(() => {\n    setUser(props.user);\n  }, [props.user]);\n  useEffect(() => {\n    if (!inEditMode) {\n      setUpdatedDisplayName(undefined);\n    } else {\n      setUpdatedDisplayName(displayName);\n    }\n  }, [inEditMode, displayName]);\n\n  const onClickEdit = async () => {\n    const body = {\n      displayName: updatedDisplayName\n    };\n\n    try {\n      const response = await updateUser(username, body);\n      setInEditMode(false);\n      setUser(response.data);\n    } catch (error) {}\n  };\n\n  const routeParams = useParams();\n  const pathUsername = routeParams.username;\n  let message = \"We cannot edit\";\n\n  if (pathUsername === loggedInUsername) {\n    message = \"We can edit\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProfileImageWithDefault, {\n    className: \"rounded-circle shadow\",\n    width: \"150\",\n    height: \"160\",\n    alt: `${username} profile`,\n    image: image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, !inEditMode && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, displayName, username), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success  d-inline-flex\",\n    onClick: () => setInEditMode(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material-icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 98\n    }\n  }, \"create\"), t('Edit'))), inEditMode && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: t('Change Display Name'),\n    defaultValue: displayName,\n    onChange: event => {\n      setUpdatedDisplayName(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary d-inline-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material-icons\",\n    onClick: onClickEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 65\n    }\n  }, \"save\"), t('Save')), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => setInEditMode(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, t('Cancel'))))));\n};\n\nexport default ProfileCard;","map":{"version":3,"sources":["D:/JsProjects/Tehap_FrontEnd/Tehap_FrontEnd/src/components/ProfileCard.js"],"names":["React","useEffect","useState","useParams","useSelector","ProfileImageWithDefault","useTranslation","Input","updateUser","ProfileCard","props","username","loggedInUsername","store","inEditMode","setInEditMode","updatedDisplayName","setUpdatedDisplayName","user","setUser","t","displayName","image","undefined","onClickEdit","body","response","data","error","routeParams","pathUsername","message","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ProfileImageWithDefault from './ProfileImageWithDefault';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Input from \"../components/Input\";\r\nimport { updateUser } from \"../api/apiCalls\";\r\n\r\nconst ProfileCard = (props) => {\r\n  const { username: loggedInUsername } = useSelector((store) => {\r\n    return {\r\n      username: store.username,\r\n    };\r\n  });\r\n  const [inEditMode, setInEditMode] = useState(false);\r\n  const [updatedDisplayName, setUpdatedDisplayName] = useState();\r\n  const [user, setUser] = useState({});\r\n\r\n  const { t } = useTranslation();\r\n  //const { user } = props;\r\n  const { username, displayName, image } = user;\r\n\r\n\r\n  useEffect(() => {\r\n    setUser(props.user);\r\n  }, [props.user]);\r\n\r\n  useEffect(() => {\r\n    if (!inEditMode) {\r\n      setUpdatedDisplayName(undefined);\r\n    } else {\r\n      setUpdatedDisplayName(displayName);\r\n    }\r\n  }, [inEditMode, displayName]);\r\n\r\n\r\n  const onClickEdit = async () => {\r\n    const body = {\r\n      displayName: updatedDisplayName\r\n    };\r\n    try {\r\n      const response = await updateUser(username, body);\r\n      setInEditMode(false);\r\n      setUser(response.data)\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n\r\n  const routeParams = useParams();\r\n\r\n  const pathUsername = routeParams.username;\r\n  let message = \"We cannot edit\";\r\n  if (pathUsername === loggedInUsername) {\r\n    message = \"We can edit\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"card text-center\">\r\n      <div className=\"card-header\">\r\n        <ProfileImageWithDefault\r\n          className=\"rounded-circle shadow\"\r\n          width=\"150\"\r\n          height=\"160\"\r\n          alt={`${username} profile`}\r\n          image={image}\r\n        />\r\n      </div>\r\n      <div className=\"card-body\">\r\n        {(!inEditMode && <>\r\n          <h4>\r\n            {displayName}\r\n            {username}\r\n          </h4>\r\n\r\n          <button className=\"btn btn-success  d-inline-flex\" onClick={() => setInEditMode(true)}><span className=\"material-icons\">create</span>\r\n            {t('Edit')}</button></>\r\n        )}\r\n        {(inEditMode && (\r\n          <div>\r\n            <Input label={t('Change Display Name')} defaultValue={displayName} onChange={(event) => { setUpdatedDisplayName(event.target.value) }}></Input>\r\n            <div>\r\n              <button className=\"btn btn-primary d-inline-flex\"><span className=\"material-icons\" onClick={onClickEdit}>\r\n                save\r\n              </span>\r\n                {t('Save')}\r\n              </button>\r\n              <button className=\"btn\" onClick={() => setInEditMode(false)}>{t('Cancel')}</button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileCard;\r\n"]},"metadata":{},"sourceType":"module"}